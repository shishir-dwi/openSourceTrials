# -*- coding: utf-8 -*-
"""rephraser-openai-Copy1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y57H72dAHiGKFqQ0pCaB0DBqhPSIER-9
"""

from dotenv import load_dotenv

load_dotenv()

import getpass
import os

if not os.environ.get("OPENAI_API_KEY"):
  os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter API key for OpenAI: ")

from langchain_openai import ChatOpenAI

model = ChatOpenAI(model="gpt-4o-mini", temperature=0.3)

"""## PROMPT ENGINEERING"""

from langchain.prompts import ChatPromptTemplate

"""#### Role"""

Role = """An Educational AI model designed to Rephrase text"""

"""#### Task"""

Task = """To convert the text such that your response """

"""#### Style / Tag / Keywords

1. less technical terms
"""

style = """should be simpler and use fewer technical terms compared to the original input"""

"""2. Easier language"""

style = """is in a simple and Easy to understand language"""

"""3. More Pointers"""

style = """should include additional points or details, expanding the content to increase its overall length and provide more information"""

"""<p style = "color: red">My Insights starts now</p>

4. Mention the topics covered in the text answer in the ending of the response  --- tobe worked on later
"""

style = """include a summary that explicitly lists the topics covered in the text at the end of the response."""

"""5. Use Mnemonics or Memory Aids  -- not feasible  -- in the initial phase"""

style = """Include simple mnemonics or memory aids to help the student remember key concepts."""

"""6. Use Analogy"""

style = """explains the text including an analogy of general everyday activities one can easily infer """

"""7. Include examples"""

style = """Ensure the inclusion of examples if not already provided, with the quantity ranging from 2 to 5, wherever feasible."""

"""8. Visual Representation --- Not feasible
9. Highlight practical applications or real-world relevance of the concepts covered in the text.
10. tag - theoritical  --- numerical --

#### Instructions
"""

instructions = (
    "Rephrase the provided text such that it is Concise while retaining its original meaning. \n"
    "The generated rephrased answer word length should be around that of the given content. \n"
    "Ensure the rephrased response remains in the context of the provided content without introducing unrelated information. \n"
)

"""#### Ouput_Format"""

output_format = (
    "Provide the output in JSON format with the following keys:\n"
    "- `input_text`: The original input text.\n"
    "- `rephrased_text_response`: The rephrased version of the input text."
    "Ensure there is no additional text, commentary, or formatting outside the JSON structure."

)

"""<h3 style="color: green">TEMPLATE STRING</h3>

template_string = (
    "You're an Educational AI model designed to Rephrase text, which has all the knowledge of the undergraduate Bachelors of Technology Course."
    "Your task is rephrase the given text based on the your {style} --<p style ="color : red"> yaha pe bhi test karna hai,</p> the context, and the given guidelines. \n\n"
    "Your writing style : {style}. "
    "Follow these instructions: {instructions}\n"
    "Text: ```{text}```\n"
    "{output_format}"
)
"""

template_string = (
    "You're an Educational AI model designed to Rephrase text, which has all the knowledge of the undergraduate Bachelors of Technology Course."
    "Your task is rephrase the given text based on the your style, the context, and the given guidelines. \n\n"
    "Your writing style : {style}. \n\n"
    "Follow these instructions to generate a good quality rephrased answer: {instructions}\n"
    "Given content to be used for rephrasing: ```{text}```\n\n"
    "{output_format} \n\n"
    "Ensure that you follow all the above guidelines and rules to generate the rephrased content. Any deviation from these guidelines \
    will result in rephrased content not meeting the education standards required for this exercise."

)

prompt_template_1 = ChatPromptTemplate.from_template(template_string)

print(prompt_template_1)

messages = prompt_template_1.format_messages(text=input_text, Task=Task, Role=Role, style=style, instructions=instructions, output_format=output_format)

"""<h1 style = "color : blue; font-family : verdana">RUNNING ON THE FINAL SAMPLE OF PME DATA</h1>

## Importing the csv
"""

import pandas as pd

df = pd.read_csv('genSum.csv')

df.head()

"""## Data cleaning and Preprocessing"""

# converting the string to dictionary of the summary column
import ast
df['summarized_ans'] = df['summary'].apply(ast.literal_eval)

df.head()

print(len(df.summarized_ans))

for i in df.summarized_ans:
    print(type(i))

"""## making a list of all these dicts of summarized ans to pass it as input text for the model"""

summarizedAnswerList = []
for i in df.summarized_ans:
    summarizedAnswerList.append(i['summarizedAnswer'])

print(summarizedAnswerList)

print(len(summarizedAnswerList))

"""## getting REPHRASED outputs"""

rephrasedList = []
for summary in summarizedAnswerList:
    particular_message = prompt_template_1.format_messages(text=summary, Task=Task, Role=Role, style=style, instructions=instructions, output_format=output_format)
    response = model.invoke(particular_message)
    res_content = response.content
    rephrasedList.append(res_content)

print(rephrasedList)

count = 1
for i in rephrasedList:
    print(count)
    count += 1
    print(i[:10])
    print(i[-10:])
    print("END \n")

"""from above it can be seen that there are some outputs which include the substring ```json in the starting \
this could affect the output parsed quality
"""

back_count = 0
for i in rephrasedList:
    if i[0] == '`':
        back_count += 1

print(back_count)

ind = 0
for i in rephrasedList[0]:
    if i == '{' :
        break
    else:
        ind+= 1

print(ind)

"""## parsing the rephrased outputs into json format

#### First I will remove the substring ```json from starting and from last if it is present
"""

rephrasedList_2 = []
for res in rephrasedList:
    if res[0] == '`':
        rephrasedList_2.append(res[8:-4])
    else:
        rephrasedList_2.append(res)

for i in rephrasedList_2:
    print(i[:10])
    print(i[-10:])

print(len(rephrasedList_2))

print(rephrasedList_2[0])

"""### now I will parse this cleaned strings into json format"""

final_list = []

count = 0

for rephrasedAns in rephrasedList_2:
    try:
        parsed_rephrased_ans = json.loads(rephrasedAns)
        final_list.append(parsed_rephrased_ans)
    except json.JSONDecodeError as e:
        print("Failed to parse JSON", e)
        count += 1

print(count)

print(final_list)

for i in final_list:
    print(type(i))

summAnsList = []
rephrasedAnsList = []
for i in final_list:
    summAnsList.append(i['input_text'])
    rephrasedAnsList.append(i['rephrased_text_response'])

final_df = pd.DataFrame({'Summary' : summAnsList,
                         'Rephrased Ans' : rephrasedAnsList
                        })

final_df.head()

final_df.to_csv('sample_1.csv', index=False)

